openapi: 3.1.0
info:
  title: Apricate API
  version: '0.5'
  summary: Apricate is a multiplayer game built on a free web API.
  contact:
    name: James (Greenitthe)
    email: james@apricate.io
  license:
    identifier: GPL-3.0-only
    name: GPL-3
  description: 'Apricate is a multiplayer game built on a free web API. You control a magic farm and several assistants who help sell your plants in town. Corner the market on onions or spend your days breeding the perfect hybrid, or find your own way in the world.'
servers:
  - url: 'https://apricate.io/api'
paths:
  /users:
    get:
      summary: Get Users
      tags:
        - Users
        - Public
      operationId: Get Users
      description: 'Get lists of registered usernames with various filters: unique, active, etc.'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    code: 1
                    message: '[Generic_Success] Request Successful'
                    data:
                      unique_users:
                        - Greenitthe
                        - Viridis
                        - Green
                      active_users:
                        - Green
                        - Greenitthe
                        - Viridis
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    type: object
                    required:
                      - unique_users
                      - active_users
                    properties:
                      unique_users:
                        type: array
                        items:
                          type: string
                      active_users:
                        type: array
                        items:
                          type: string
                required:
                  - code
                  - message
                  - data
  '/users/{username}':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
        description: Case-insensitive username
    get:
      summary: Get Specific User's Public Info
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Public-User-Info'
      operationId: Get Specific User
      description: Gets the public info of a specified user
  '/users/{username}/claim':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
        description: Case-insensitive username
    post:
      summary: ''
      operationId: Create User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    code: 1
                    message: '[Generic_Success] Request Successful'
                    data:
                      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRyaWFuIn0.KvgNKsC8YXAsMTox6mX5T1UJXuHQNx9LQ574v-c6zKo
                      username: trian
                      title: Noob
                      ledger:
                        currencies:
                          Coins: 100
                        favor:
                          Vince Kosuga: 50
                        escrow: {}
                      user-since: 1647896254
                      achievements:
                        - Noob
                      contracts:
                        - trian|Contract-0
                      assistants:
                        - trian|Assistant-0
                      farms:
                        - trian|Farm-TS-PR-HF
                      plots:
                        - trian|Farm-TS-PR-HF|Plot-0
                        - trian|Farm-TS-PR-HF|Plot-1
                        - trian|Farm-TS-PR-HF|Plot-2
                        - trian|Farm-TS-PR-HF|Plot-3
                      warehouses:
                        - trian|Warehouse-TS-PR-HF
                properties:
                  code:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  data:
                    $ref: '#/components/schemas/User-Info'
                required:
                  - code
                  - message
                  - data
      description: Attempt to create new user with the specified username
components:
  schemas:
    Public-User-Info:
      description: Publicly available user information
      type: object
      x-examples:
        example-1:
          username: Greenitthe
          title: Owner
          ledger:
            currencies:
              Coins: 1000
            favor:
              Vince Kosuga: 50
            escrow: {}
          user-since: 1647895469
          achievements:
            - Owner
            - Contributor
            - Noob
      properties:
        username:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        ledger:
          type: object
          required:
            - currencies
            - favor
            - escrow
          properties:
            currencies:
              type: object
            favor:
              type: object
            escrow:
              type: object
        user-since:
          type: number
          description: Unix Timestamp
        achievements:
          type: array
          items:
            type: string
      required:
        - username
        - title
        - ledger
        - user-since
        - achievements
    
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: When you register a new user you will be granted a private bearer token which grants authorization to use the API.
  responses: {}
tags:
  - name: Public
  - name: Users
  - name: World
